package com.ai.ecs.ecm.mall.wap.modules.goods.controller;import com.ai.ecs.ecm.mall.wap.modules.BaseController;import com.ai.ecs.ecm.mall.wap.modules.goods.constant.BroadbandConstants;import com.ai.ecs.ecm.mall.wap.modules.goods.utils.BroadbandUtils;import com.ai.ecs.ecm.mall.wap.platform.utils.InvokeEcop;import com.ai.ecs.ecm.mall.wap.platform.utils.UserUtils;import com.ai.ecs.ecop.cms.entity.BroadbandPoster;import com.ai.ecs.ecop.sys.service.DictService;import com.ai.ecs.ecsite.modules.broadBand.entity.*;import com.ai.ecs.ecsite.modules.broadBand.service.QryAddressService;import com.ai.ecs.ecsite.modules.myMobile.entity.PhoneAttributionModel;import com.ai.ecs.ecsite.modules.phoneAttribution.service.PhoneAttributionService;import com.ai.ecs.goods.api.IGoodsCommService;import com.ai.ecs.goods.api.IGoodsManageService;import com.ai.ecs.goods.entity.goods.BroadbandItemEntity;import com.ai.ecs.goods.entity.goods.TfGoodsInfo;import com.ai.ecs.member.api.IMemberAddressService;import com.ai.ecs.member.api.IMemberInfoService;import com.ai.ecs.member.entity.MemberInfo;import com.ai.ecs.member.entity.MemberVo;import com.ai.ecs.o2o.api.O2oAddrSearchService;import com.ai.ecs.o2o.entity.O2oAddrSearchRecord;import com.alibaba.fastjson.JSON;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpServletRequest;import java.io.UnsupportedEncodingException;import java.net.URLDecoder;import java.util.*;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * 宽带资源查询 * * @author Leizhi 2016/6/17 * @see * @since 1.0 */@Controller@RequestMapping("bandResourceQuery")public class BandResourceQryController extends BaseController{	@Autowired	QryAddressService qryAddressService;	@Autowired	IMemberAddressService memberAddressService;	@Autowired	IGoodsManageService goodsManageService;	@Autowired	IGoodsCommService goodsCommService;	@Autowired	private PhoneAttributionService phoneAttributionService;	@Autowired	DictService dictService;	@Autowired	InvokeEcop invokeEcop;	@Autowired	private O2oAddrSearchService o2oAddrSearchService;	@Autowired	private IMemberInfoService memberInfoService;	private static final String PATH = "web/broadband/";	/**	 * 初始化地市编码	 */	private static Map<String, String> cityName = new LinkedHashMap<>();	static	{		cityName.put("0731", "长沙");		cityName.put("0733", "株洲");		cityName.put("0732", "湘潭");		cityName.put("0734", "衡阳");		cityName.put("0739", "邵阳");		cityName.put("0730", "岳阳");		cityName.put("0736", "常德");		cityName.put("0744", "张家界");		cityName.put("0737", "益阳");		cityName.put("0735", "郴州");		cityName.put("0746", "永州");		cityName.put("0745", "怀化");		cityName.put("0738", "娄底");		cityName.put("0743", "湘西州");	}	/**	 * 资源查询入口	 *	 * @param	 * @return	 */	@RequestMapping("/toResourceQueryPage")	public String toIndex(Model model,HttpServletRequest request) throws Exception {		MemberVo memberVo = UserUtils.getLoginUser(request);		String cityCode = "";		if(memberVo!=null){			if(memberVo.getMemberLogin()!=null){				cityCode = this.getCityCode(String.valueOf(memberVo.getMemberLogin().getMemberPhone()));			}		}		model.addAttribute("cityCode",cityCode);		logger.info("----------------------------资源查询入口");		model.addAttribute("cityNames", cityName);		return PATH + "resourceQuery";	}	/**	 * 资源查询详情入口	 *	 * @return	 */	@RequestMapping("/toResurceQryDetail")	public String recommendPlan()	{		logger.info("----------------------------资源查询详情入口");		return PATH + "bandResurceQryDetail";	}	/**	 * 查询区县	 *	 * @return	 */	@RequestMapping(value = "/qryAddressCityName")	@ResponseBody	public Map<String, Object> qryAddressCityName(HttpServletRequest request)	{		String EPARCHY_CODE = request.getParameter("cityCode"); //地市编码		Map<String, Object> map = new HashMap<>();		try		{			QryAddressCityNameCondition condition = new QryAddressCityNameCondition();			condition.setEPARCHY_CODE(EPARCHY_CODE);			map = qryAddressService.qryAddressCityName(condition);		}		catch (Exception e)		{			map.put("X_RESULTCODE", -1); //接口调用失败			logger.error("宽带地址--查询楼栋异常", e);			e.printStackTrace();		}		return map;	}	/**	 * 查询小区	 *	 * @return	 */	@RequestMapping(value = "/qryAddressCommunityName")	@ResponseBody	public Map<String, Object> qryAddressCommunityName(HttpServletRequest request)	{		String city = request.getParameter("cityName"); //地市名称		String cityArea = request.getParameter("cityArea"); //区县名称		String keyWords = request.getParameter("keyWords"); //搜索关键字		Map<String, Object> map = new HashMap<>();		if(keyWords.trim().equals("") || keyWords == null) return null;		try {			city = URLDecoder.decode(city,"UTF-8");			cityArea = URLDecoder.decode(cityArea,"UTF-8");			keyWords = URLDecoder.decode(keyWords,"UTF-8");			QryAddressCommunityNameCondition condition = new QryAddressCommunityNameCondition();			condition.setEPARCHY_NAME(city);			condition.setCITY_NAME(cityArea);			condition.setKEY_STRING(keyWords);			map = qryAddressService.qryAddressCommunityName(condition);		} catch (Exception e) {			map.put("X_RESULTCODE", -1); //接口调用失败			logger.error("宽带地址--查询小区异常", e);		}		return map;	}	/**	 * 查询楼栋	 *	 * @return	 */	@RequestMapping(value = "/qryAddressBuildingName")	@ResponseBody	public Map<String, Object> qryAddressBuildingName(HttpServletRequest request)	{		String communityAddressName = request.getParameter("communityAddressName"); //地市名称		Map<String, Object> map = new HashMap<>();		try {			communityAddressName = URLDecoder.decode(communityAddressName,"UTF-8");			QryAddressBuildingNameCondition condition = new QryAddressBuildingNameCondition();			condition.setCOMMUNITY_ADDRESS_PATH(communityAddressName);			map = qryAddressService.qryAddressBuildingName(condition);		} catch (Exception e) {			map.put("X_RESULTCODE", -1); //接口调用失败			logger.error("宽带地址--查询楼栋异常", e);		}		return map;	}	/**	 * 查询单元	 *	 * @return	 */	@RequestMapping(value = "/qryAddressUnit")	@ResponseBody	public Map<String, Object> qryAddressUnit(HttpServletRequest request)	{		String eparchyCode = request.getParameter("eparchyCode"); //地市编号		String buildingCode = request.getParameter("buildingCode"); //楼栋编号		String comunityCode = request.getParameter("comunityCode"); //小区编号		Map<String, Object> map = new HashMap<>();		try {			QryUnitByBuildingCodeCondition condition = new QryUnitByBuildingCodeCondition();			condition.setEparchyCode(eparchyCode);			condition.setBuildingCode(buildingCode);			condition.setCommunityCode(comunityCode);			map = qryAddressService.qryUnitByBuildingCode(condition);		} catch (Exception e) {			map.put("X_RESULTCODE", -1); //接口调用失败			logger.error("宽带地址--查询单元异常", e);		}		return map;	}	/**	 * 查询楼层	 *	 * @return	 */	@RequestMapping(value = "/qryAddressFloor")	@ResponseBody	public Map<String, Object> qryAddressFloor(HttpServletRequest request)	{		String eparchyCode = request.getParameter("eparchyCode"); //地市编号		String unitCode = request.getParameter("unitCode"); //单元编号		String comunityCode = request.getParameter("comunityCode"); //地市编号		Map<String, Object> map = new HashMap<>();		try {			QryFloorByUnitCodeCondition condition = new QryFloorByUnitCodeCondition();			condition.setEparchyCode(eparchyCode);			condition.setUnitCode(unitCode);			condition.setCommunityCode(comunityCode);			map = qryAddressService.qryFloorByUnitCode(condition);		} catch (Exception e) {			map.put("X_RESULTCODE", -1); //接口调用失败			logger.error("宽带地址--查询楼层异常", e);		}		return map;	}	/**	 * 查询房号	 *	 * @return	 */	@RequestMapping(value = "/qryAddressHouseCode")	@ResponseBody	public Map<String, Object> qryAddressHouseCode(HttpServletRequest request)	{		String eparchyCode = request.getParameter("eparchyCode"); //地市编号		String floorCode = request.getParameter("floorCode"); //单元编号		String comunityCode = request.getParameter("comunityCode"); //地市编号		Map<String, Object> map = new HashMap<>();		try {			QryHouseByFloorCodeCondition condition = new QryHouseByFloorCodeCondition();			condition.setEparchyCode(eparchyCode);			condition.setFloorCode(floorCode);			condition.setCommunityCode(comunityCode);			map = qryAddressService.qryHouseByFloorCode(condition);		} catch (Exception e) {			map.put("X_RESULTCODE", -1); //接口调用失败			logger.error("宽带地址--查询房号异常", e);		}		return map;	}	/**	 * 查询最终地址	 *	 *	 * @return	 */	@RequestMapping(value = "/qryAddressName")	@ResponseBody	public Map<String, Object> qryAddressName(HttpServletRequest request)	{		String addressName = request.getParameter("addressKeyString");		String cityName = request.getParameter("cityName");		String cityArea = request.getParameter("cityArea");		try {			addressName = java.net.URLDecoder.decode(addressName,"UTF-8");		} catch (UnsupportedEncodingException e1) {			// TODO Auto-generated catch block			e1.printStackTrace();		}		QryAddressNameCondition condition = new QryAddressNameCondition();		if (cityName != null && cityArea != null)		{			String tempStr = cityName+" "+cityArea+" "+addressName;			condition.setKEY_STRING(tempStr);		}		else //通过楼栋查询最终地址		{			condition.setKEY_STRING(addressName);		}		Map<String, Object> map = new HashMap<>();		try		{			map = qryAddressService.qryAddressName(condition);		}		catch (Exception e)		{			map.put("X_RESULTCODE", -1); //接口调用失败			logger.error("宽带地址--查询最终地址异常", e);			e.printStackTrace();		}		return map;	}	/**	 * 查询地址类型	 * @param request	 * @return	 */	@RequestMapping(value = "/queryAddressAttr")	@ResponseBody	public Map<String, Object> queryAddressAttr(HttpServletRequest request){		String addressCode = request.getParameter("addressCode");		Map<String, Object> resultMap = new HashMap<String, Object>();		try {			QryAddressAttrCondition condition = new QryAddressAttrCondition();			condition.setADDR_ID(addressCode);			resultMap = qryAddressService.queryAddressAttr(condition);		}catch (Exception e){			resultMap.put("X_RESULTCODE", -1); //接口调用失败			logger.error("宽带地址--查询地址类型异常", e);			e.printStackTrace();		}		return resultMap;	}	/**	 * 查询资源覆盖能力	 *	 * @return	 */	@RequestMapping(value = "/coverInfo")	@ResponseBody	public Map<String, Object> coverInfo(HttpServletRequest request) {		String addressCode = request.getParameter("addressCode");		String coverType = request.getParameter("coverType");		Map<String, Object> map = new HashMap<>();		try		{			CoverInfoCondition condition = new CoverInfoCondition();			coverType = URLDecoder.decode(coverType,"UTF-8");			condition.setCOVER_TYPE(coverType);			condition.setADDR_ID(addressCode);			map = qryAddressService.coverInfo(condition);		}		catch (Exception e)		{			map.put("X_RESULTCODE", -1); //接口调用失败			logger.error("宽带地址--查询资源覆盖能力异常", e);			e.printStackTrace();		}		return map;	}	/**	 * 查询宽带商品	 *	 * @return	 */	@RequestMapping(value = "/queryBandGoods")	public String queryBandGoods(HttpServletRequest request, Model model) throws Exception {		if(!"59708a6e8b504fe095a3e6087b1c6068".equals(request.getParameter("pw"))){			throw new Exception("正在建设中！！！");		}		int maxWidth = 20;		String EPARCHY_CODE = request.getParameter("EPARCHY_CODE");		String productName = request.getParameter("MAX_WIDTH");		String lastAddress = request.getParameter("lastAddress");		String freePort=request.getParameter("form1_freePort");		String houseCode = request.getParameter("form1_houseCode");		String coverType=request.getParameter("form1_coverType");		if (!StringUtils.isBlank(productName))		{			maxWidth = Integer.parseInt(productName);		}		/**		 * 根据系统目前宽带产品进行判断(from陈淑华)		 */		if (0 < maxWidth && maxWidth <= 20)		{			maxWidth = 20;		}		if (20 < maxWidth && maxWidth <= 50)		{			maxWidth = 50;		}		if (50 < maxWidth)		{			maxWidth = 100;		}		List<String> eparchyCodes = new ArrayList<>(); //地市编码列表		eparchyCodes.add(EPARCHY_CODE);		Map<String, Object> bbArgs = new HashMap<>(); //宽带信息查询条件//		bbArgs.put("preCategoryId",goodsCommService.getGoodsPropetyValue("BROADBAND_CATEGORY_ID_ADD", null)); //宽带商品常量-宽带新装		bbArgs.put("preCategoryId", dictService.getDictValue("BROADBAND_CATEGORY_ID","BROADBAND_CATEGORY_ID_ADD"));		bbArgs.put("eparchyCodes", eparchyCodes);		bbArgs.put("productName", maxWidth);		bbArgs.put("orderCloumn", "SKUATTR.PROD_ATTR_VALUE_ID");		bbArgs.put("orderType", "ASC");		bbArgs.put("goodsStatusId", 4);		bbArgs.put("chnlCode","E007");		List<TfGoodsInfo> goodsInfoList = goodsManageService.queryBroadInfos(bbArgs);		List<BroadbandItemEntity> broadbandItemList = null;		if (goodsInfoList != null)		{			try			{				broadbandItemList = BroadbandUtils.convertBroadbandItemList(goodsInfoList);			}			catch (Exception e)			{			e.printStackTrace();		}		}		model.addAttribute("broadbandItemList",broadbandItemList);		model.addAttribute("EPARCHY_CODE",EPARCHY_CODE);		model.addAttribute("lastAddress",lastAddress);		model.addAttribute("houseCode",houseCode);		model.addAttribute("coverType",coverType);		model.addAttribute("freePort",freePort);		model.addAttribute("maxWidth",productName);		return PATH + "bandResurceQryDetail";	}	/**	 * 宽带地址查询页面	 * @param model	 * @return	 */	@RequestMapping("address")	public String bandAddressQuery(Model model, HttpServletRequest request) throws Exception {		MemberVo memberVo = UserUtils.getLoginUser(request);		MemberInfo member = memberInfoService.getMemberInfoByKey(memberVo.getMemberLogin().getMemberId());		String regCity = ":(\\S*)市";		String regCounty = ":(\\S*)";		String city=regPattern(member.getMemberCity(),regCity);		String county=regPattern(member.getMemberCounty(),regCounty);		Map<String,Object> map = new HashMap<>();		map.put("SEARCH_TYPE","1");		List<O2oAddrSearchRecord> topList = o2oAddrSearchService.queryTopSearch(map);		map.put("SERIAL_NUMBER",String.valueOf(memberVo.getMemberLogin().getMemberPhone()));		List<O2oAddrSearchRecord> searchList = o2oAddrSearchService.querySearchRecordByPhone(map);		model.addAttribute("topList",topList);		model.addAttribute("searchList",searchList);		model.addAttribute("city",city);		model.addAttribute("county",county);		return "web/broadband/addressIndex";	}	/**	 * 套餐查询	 * @param model	 * @return	 */	@RequestMapping("queryPackage")	public String  queryPackage(Model model, HttpServletRequest request,String addressPath,String communityName) throws Exception {		//单宽带		Map<String,Object> bbArgs = new HashMap<>();		bbArgs.put("preCategoryId", dictService.getDictValue("BROADBAND_CATEGORY_ID","BROADBAND_CATEGORY_ID_ADD"));		List<String> eparchyCodes = new ArrayList<>();		eparchyCodes.add(BroadbandConstants.EPARCHY_CODE);		bbArgs.put("eparchyCodes",eparchyCodes);		bbArgs.put("orderColumn","SV.BARE_PRICE");		bbArgs.put("orderType","ASC");		bbArgs.put("goodsStatusId",4);		bbArgs.put("chnlCode","E007");		MemberVo memberVo = UserUtils.getLoginUser(request);		MemberInfo member = memberInfoService.getMemberInfoByKey(memberVo.getMemberLogin().getMemberId());		String regCity = ":(\\S*)市";		String regCounty = ":(\\S*)";		String city=regPattern(member.getMemberCity(),regCity);		String county=regPattern(member.getMemberCounty(),regCounty);		model.addAttribute("city",city);		model.addAttribute("county",county);		communityName = java.net.URLDecoder.decode(communityName,"UTF-8");		addressPath = java.net.URLDecoder.decode(addressPath,"UTF-8");		model.addAttribute("communityName",communityName);		model.addAttribute("addressPath",addressPath);		List<TfGoodsInfo> goodsInfoList = goodsManageService.queryBroadInfos(bbArgs);		//和家庭		bbArgs.put("preCategoryId", dictService.getDictValue("BROADBAND_CATEGORY_ID","HE_FAMILY_BROADBAND_CATEGORY_ID"));		List<TfGoodsInfo> heGoodsInfoList = goodsManageService.queryBroadInfos(bbArgs);		//消费叠加型		bbArgs.put("preCategoryId", dictService.getDictValue("BROADBAND_CATEGORY_ID","CONSUPOSTN_BROADBAND_CATEGORY_ID"));		List<TfGoodsInfo> consupostnGoodsInfoList = goodsManageService.queryBroadInfos(bbArgs);		List<BroadbandItemEntity> broadbandItemList = null;		List<BroadbandItemEntity> heBroadbandItemList = null;		List<BroadbandItemEntity> consupostnItemList = null;		try {			broadbandItemList = BroadbandUtils.convertInstallBroadbandItemList(goodsInfoList);			heBroadbandItemList = BroadbandUtils.convertHeBroadbandItemEntityList(heGoodsInfoList);			consupostnItemList = BroadbandUtils.convertHeBroadbandItemEntityList(consupostnGoodsInfoList);		} catch (NumberFormatException e) {			e.printStackTrace();		} catch (Exception e) {			e.printStackTrace();		}//		model.addAttribute("broadbandItemList", broadbandItemList);//		model.addAttribute("heBroadbandItemList", heBroadbandItemList);//		model.addAttribute("consupostnItemList",consupostnItemList);		List<BroadbandPoster> broadbandPosterList = invokeEcop.getBroadbandPosterInfo("光宽带办理","2");		List<BroadbandPoster> hebroadbandPosterList = invokeEcop.getBroadbandPosterInfo("和家庭套餐办理","2");		List<BroadbandPoster> consupostnPosterList = invokeEcop.getBroadbandPosterInfo("消费叠加型套餐办理","2");		if(broadbandPosterList.size()==0&&hebroadbandPosterList.size()==0&&consupostnPosterList.size()==0){			model.addAttribute("hasData",false);		}else{			model.addAttribute("hasData",true);		}		model.addAttribute("broadbandPosterList", broadbandPosterList);		model.addAttribute("hebroadbandPosterList", hebroadbandPosterList);		model.addAttribute("consupostnPosterList",consupostnPosterList);		return "web/broadband/packageIndex";	}	private  String regPattern(String value,String regx){		// 创建 Pattern 对象		Pattern r = Pattern.compile(regx);		String result = "";		// 现在创建 matcher 对象		Matcher m = r.matcher(value);		if (m.find( )) {			result = m.group(1);		}		return result;	}	/**	 * 套餐查询	 * @param model	 * @return	 */	@RequestMapping("queryWapPackage")	public String  queryWapPackage(HttpServletRequest request,Model model,String addressPath,String communityName,String city,String county) throws Exception {		//单宽带		List<String> eparchyCodes = new ArrayList<>();		eparchyCodes.add(BroadbandConstants.EPARCHY_CODE);		communityName = java.net.URLDecoder.decode(communityName,"UTF-8");		addressPath = java.net.URLDecoder.decode(addressPath,"UTF-8");		city = java.net.URLDecoder.decode(city,"UTF-8");		city = cityName.get(city);		county = java.net.URLDecoder.decode(county,"UTF-8");		model.addAttribute("communityName",communityName);		model.addAttribute("addressPath",addressPath);		model.addAttribute("city",city);		model.addAttribute("county",county);		// 是否有宽带覆盖		Boolean flag = false;		// 查询地址是否宽带覆盖		QryAddressNameCondition condition = new QryAddressNameCondition();		if (city != null && county != null){			String tempStr = city+" "+county+" "+addressPath;			condition.setKEY_STRING(tempStr);		}else{ //通过楼栋查询最终地址			condition.setKEY_STRING(addressPath);		}		Map<String, Object> map = new HashMap<>();		try{			map = qryAddressService.qryAddressName(condition);		}catch (Exception e){			map.put("X_RESULTCODE", -1); //接口调用失败			e.printStackTrace();		}		List list = (List) map.get("result");		Map result = (Map) list.get(0);		List addressList= (List) result.get("ADDRESS_INFO");		if(addressList!=null&&addressList.size()>0){			Map addressInfo = (Map) addressList.get(0);			if(com.ai.ecs.common.utils.StringUtils.isNotEmpty(String.valueOf(addressInfo.get("HOUSE_NAME")))){				flag = true;			}		}		List<BroadbandPoster> broadbandPosterList = invokeEcop.getBroadbandPosterInfo("光宽带办理","2");		List<BroadbandPoster> hebroadbandPosterList = invokeEcop.getBroadbandPosterInfo("和家庭套餐办理","2");		List<BroadbandPoster> consupostnPosterList = invokeEcop.getBroadbandPosterInfo("消费叠加型套餐办理","2");		//是否有宽带业务		Boolean  hasData = broadbandPosterList.size()==0&&hebroadbandPosterList.size()==0&&consupostnPosterList.size()==0;		if(hasData){			flag = false;		}else if(!hasData&&flag){			flag = true;		}else{			flag = false;		}		model.addAttribute("broadbandPosterList", broadbandPosterList);		model.addAttribute("hebroadbandPosterList", hebroadbandPosterList);		model.addAttribute("consupostnPosterList",consupostnPosterList);		model.addAttribute("hasData",flag);		return "web/broadband/packageWapIndex";	}	/**	 * 获取手机号码的归属地市编码	 * @param installPhoneNum	 * @return	 * @throws Exception	 */	private String getCityCode(String installPhoneNum) throws Exception{		PhoneAttributionModel phoneAttributionModel = new PhoneAttributionModel();		phoneAttributionModel.setSerialNumber(installPhoneNum);		Map<String, Object> resultMap = phoneAttributionService.queryPhoneAttribution(phoneAttributionModel);		String cityCode = String.valueOf(((Map)((List)resultMap.get("result")).get(0)).get("AREA_CODE"));		logger.info("resultMapNNNNN:"+ JSON.toJSONString(resultMap));		if(("null").equals(cityCode)|| !com.ai.ecs.common.utils.StringUtils.isNotEmpty(cityCode)){			return null;		}		return cityCode;	}}